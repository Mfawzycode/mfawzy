# Retail Sales Prediction

## Project Description
This project aims to predict daily sales for a retail store based on historical sales data. The project involves data cleaning, exploratory data analysis (EDA), feature engineering, building a predictive model, and visualizing the results.

## Dataset
The dataset `retail_sales_data.csv` contains sales data from a fictional retail store. It includes the following columns:
- `Date`: The date of the sales.
- `Store`: The store where the sales occurred.
- `Product`: The product sold.
- `Sales`: The number of units sold.
- `Price`: The price per unit.
- `Promotion`: Whether there was a promotion on the product.

## Installation
1. Clone the repository:
    ```bash
    git clone https://github.com/yourusername/retail-sales-prediction.git
    ```
2. Install the necessary packages:
    ```bash
    pip install pandas matplotlib seaborn scikit-learn
    ```

## Usage
1. Load and clean the dataset:
    ```python
    import pandas as pd
    df = pd.read_csv('retail_sales_data.csv')
    df.dropna(inplace=True)
    df['Date'] = pd.to_datetime(df['Date'])
    ```
2. Perform EDA:
    ```python
    import matplotlib.pyplot as plt
    import seaborn as sns
    plt.figure(figsize=(10, 5))
    df.groupby('Date')['Sales'].sum().plot()
    plt.title('Sales Trend Over Time')
    plt.xlabel('Date')
    plt.ylabel('Total Sales')
    plt.grid(True)
    plt.show()
    ```
3. Feature Engineering:
    ```python
    df['DayOfWeek'] = df['Date'].dt.dayofweek
    df['Month'] = df['Date'].dt.month
    df['Promotion'] = df['Promotion'].map({'Yes': 1, 'No': 0})
    df.drop(['Date', 'Product'], axis=1, inplace=True)
    ```
4. Build and evaluate the model:
    ```python
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.metrics import mean_absolute_error

    X = df.drop('Sales', axis=1)
    y = df['Sales']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    print(f'Mean Absolute Error: {mae}')
    ```

## Results
- **Sales Trend Over Time**: Shows how sales have changed over time.
- **Sales Distribution by Store**: Box plot showing the distribution of sales by store.
- **Correlation Matrix**: Heatmap showing correlations between different features.
- **Actual vs Predicted Sales**: Scatter plot comparing actual sales to predicted sales.
- **Feature Importance**: Bar chart showing the importance of each feature in the model.

## Contributing
Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on the code of conduct and the process for submitting pull requests.

## License
This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
